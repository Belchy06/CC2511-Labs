/* ###################################################################
 **     Filename    : main.c
 **     Project     : 2018_Exam
 **     Processor   : MK22FN512VDC12
 **     Version     : Driver 01.01
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2020-11-08, 15:08, # CodeGen: 0
 **     Abstract    :
 **         Main module.
 **         This module contains user's application code.
 **     Settings    :
 **     Contents    :
 **         No public methods
 **
 ** ###################################################################*/
/*!
 ** @file main.c
 ** @version 01.01
 ** @brief
 **         Main module.
 **         This module contains user's application code.
 */
/*!
 **  @addtogroup main_module main module documentation
 **  @{
 */
/* MODULE main */

/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Pins1.h"
#include "Terminal.h"
#include "Inhr1.h"
#include "ASerialLdd1.h"
#include "ADC.h"
#include "AdcLdd1.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PDD_Includes.h"
#include "Init_Config.h"
/* User includes (#include below this line is not maintained by Processor Expert) */
#include <stdbool.h>
#include <stdio.h>
#include <string.h>


volatile char buffer[100];
volatile uint8 index;
volatile bool complete_command = false;

float calculateVoltage(uint16 adcValue) {
	adcValue = (float)adcValue;
	return adcValue / (65535 / 3.3);
}

float calculateTemp(uint16 adcValue) {
	adcValue = (float)adcValue;
	return (30702 - adcValue) / 162.8;
}

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
	/* Write your local variable definition here */
	uint16 result;
	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
	/*** End of Processor Expert internal initialization.                    ***/

	// Q1 a.
	Terminal_SendStr("CC2511 Exam 2019 \r\nWilliam Belcher\r\n");
	ADC_Calibrate(TRUE);
	/* Write your code here */
	/* For example: for(;;) { } */
	for (;;) {
		while (!complete_command) {
			__asm("wfi");
		}
		if (complete_command) {
			// Q2 a
			if (0 == strcmp((char *) buffer, "t")) {
				ADC_Measure(TRUE);
				ADC_GetValue16(&result);
				Terminal_SendStr("\r\nAnalog Measurement: \r\nx: ");
				Terminal_SendNum(result);
				Terminal_SendStr("\r\nv = ");
				Terminal_SendFloatNum(calculateVoltage(result));
				Terminal_SendStr("V \r\n");


			}

			complete_command = false;
			index = 0;
		}
	}

	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
